{
  "stats": {
    "suites": 10,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2017-03-27T01:11:29.590Z",
    "end": "2017-03-27T01:12:00.504Z",
    "duration": 30914,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Todo APIs",
        "suites": [
          {
            "title": "test POST",
            "suites": [],
            "tests": [
              {
                "title": "should save Todo",
                "fullTitle": "Todo APIs test POST should save Todo",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "37a02a08-f6dd-4a58-8e27-4ede410861fe",
                "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
                "skipped": false
              },
              {
                "title": "should NOT save Todo with empty text",
                "fullTitle": "Todo APIs test POST should NOT save Todo with empty text",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e19755b4-642c-4a25-a910-fd792709d55b",
                "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should save Todo",
                "fullTitle": "Todo APIs test POST should save Todo",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "37a02a08-f6dd-4a58-8e27-4ede410861fe",
                "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
                "skipped": false
              },
              {
                "title": "should NOT save Todo with empty text",
                "fullTitle": "Todo APIs test POST should NOT save Todo with empty text",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e19755b4-642c-4a25-a910-fd792709d55b",
                "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 579,
            "rootEmpty": false
          },
          {
            "title": "test GET",
            "suites": [],
            "tests": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 207,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f7cc47ee-4a3b-413b-82b3-e58c661c31d6",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test GET should NOT GET all todos && statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1c319fb3-99f3-40b2-bbd8-5989198dfb19",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "823cf009-bba2-4f81-a245-80b5aacfd0ff",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should NOT GET a todo & 404",
                "fullTitle": "Todo APIs test GET should NOT GET a todo & 404",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "12ad7e3a-75a5-4633-b3e5-03cd48701eae",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7e64c7fa-0b07-4381-a37e-fad563654360",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 207,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f7cc47ee-4a3b-413b-82b3-e58c661c31d6",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test GET should NOT GET all todos && statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1c319fb3-99f3-40b2-bbd8-5989198dfb19",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "823cf009-bba2-4f81-a245-80b5aacfd0ff",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should NOT GET a todo & 404",
                "fullTitle": "Todo APIs test GET should NOT GET a todo & 404",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "12ad7e3a-75a5-4633-b3e5-03cd48701eae",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7e64c7fa-0b07-4381-a37e-fad563654360",
                "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 427,
            "rootEmpty": false
          },
          {
            "title": "test PATCH",
            "suites": [],
            "tests": [
              {
                "title": "should PATCH a todo & statusCode_OK_200",
                "fullTitle": "Todo APIs test PATCH should PATCH a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b62069eb-cf08-4adb-9dc4-4a89e1b8739f",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f1170477-275d-4b77-a966-d9ffa72a413d",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & 404",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & 404",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2906bee-1019-4629-a67a-7e1829b53d75",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0012287f-d284-4b7d-be87-221233c4d688",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "c07b98aa-9680-4270-8ec8-bd51b819745b",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should PATCH a todo & statusCode_OK_200",
                "fullTitle": "Todo APIs test PATCH should PATCH a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b62069eb-cf08-4adb-9dc4-4a89e1b8739f",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f1170477-275d-4b77-a966-d9ffa72a413d",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & 404",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & 404",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2906bee-1019-4629-a67a-7e1829b53d75",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0012287f-d284-4b7d-be87-221233c4d688",
                "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 556,
            "rootEmpty": false
          },
          {
            "title": "test DELETE",
            "suites": [],
            "tests": [
              {
                "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c48cc428-0981-47c3-8935-8717da67cac9",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a1abe70c-6170-41e9-ae37-5fa9beb5fe6d",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "67023e8b-780d-4ee8-8d09-9780c45e1f69",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5903fa21-6598-4ad0-b5aa-ea392d644e71",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should DELETE a Todo",
                "fullTitle": "Todo APIs test DELETE should DELETE a Todo",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0092c421-f54d-455f-984c-1248e81ea45b",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c48cc428-0981-47c3-8935-8717da67cac9",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a1abe70c-6170-41e9-ae37-5fa9beb5fe6d",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "67023e8b-780d-4ee8-8d09-9780c45e1f69",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5903fa21-6598-4ad0-b5aa-ea392d644e71",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              },
              {
                "title": "should DELETE a Todo",
                "fullTitle": "Todo APIs test DELETE should DELETE a Todo",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0092c421-f54d-455f-984c-1248e81ea45b",
                "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 729,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.todo.test.js",
        "uuid": "599f8945-1772-4832-88d4-afa04522ddb8",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Test User APIs",
        "suites": [
          {
            "title": "POST /users",
            "suites": [],
            "tests": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 426,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64b2348c-9b4f-4e2b-82b1-c063b08e634b",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "086a1eaf-572e-4f3a-839a-bcbac358e31d",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1cb1821d-f8d0-4171-a9b8-5d6e72d2153d",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 426,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64b2348c-9b4f-4e2b-82b1-c063b08e634b",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "086a1eaf-572e-4f3a-839a-bcbac358e31d",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1cb1821d-f8d0-4171-a9b8-5d6e72d2153d",
                "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 644,
            "rootEmpty": false
          },
          {
            "title": "GET /users/me",
            "suites": [],
            "tests": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7960aeb2-6846-446f-ae3b-f8101e0d4c07",
                "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "68ae2120-4a24-49a1-9e38-fe436dbf61c5",
                "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "07ed20da-2a73-4c54-891a-220044a9cd58",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7960aeb2-6846-446f-ae3b-f8101e0d4c07",
                "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "68ae2120-4a24-49a1-9e38-fe436dbf61c5",
                "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 114,
            "rootEmpty": false
          },
          {
            "title": "POST /users/login",
            "suites": [],
            "tests": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fac84021-8f88-45ec-9aeb-5fa447b0c597",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8ea19c5c-59d0-4d4a-b5a7-3ec129a67521",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a8a5d08d-7222-4293-aa5e-519fecb9047d",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fac84021-8f88-45ec-9aeb-5fa447b0c597",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8ea19c5c-59d0-4d4a-b5a7-3ec129a67521",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a8a5d08d-7222-4293-aa5e-519fecb9047d",
                "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 661,
            "rootEmpty": false
          },
          {
            "title": "DELETE users/me/token",
            "suites": [],
            "tests": [
              {
                "title": "it should remove a token",
                "fullTitle": "Test User APIs DELETE users/me/token it should remove a token",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0f7c365c-ea47-4c6b-a33d-58d91de8f11c",
                "parentUUID": "2e625c8d-8d65-4602-b37d-203a7e10279e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "2e625c8d-8d65-4602-b37d-203a7e10279e",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should remove a token",
                "fullTitle": "Test User APIs DELETE users/me/token it should remove a token",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0f7c365c-ea47-4c6b-a33d-58d91de8f11c",
                "parentUUID": "2e625c8d-8d65-4602-b37d-203a7e10279e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 312,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.user.test.js",
        "uuid": "252ec7b2-2d62-413c-95af-f14c440165f0",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "d96cd6ac-03e8-414d-a389-d898fa0cff74",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should save Todo",
      "fullTitle": "test POST should save Todo",
      "timedOut": false,
      "duration": 355,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "37a02a08-f6dd-4a58-8e27-4ede410861fe",
      "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
      "skipped": false
    },
    {
      "title": "should NOT save Todo with empty text",
      "fullTitle": "test POST should NOT save Todo with empty text",
      "timedOut": false,
      "duration": 224,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "e19755b4-642c-4a25-a910-fd792709d55b",
      "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 207,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f7cc47ee-4a3b-413b-82b3-e58c661c31d6",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
      "fullTitle": "test GET should NOT GET all todos && statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1c319fb3-99f3-40b2-bbd8-5989198dfb19",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "823cf009-bba2-4f81-a245-80b5aacfd0ff",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should NOT GET a todo & 404",
      "fullTitle": "test GET should NOT GET a todo & 404",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "12ad7e3a-75a5-4633-b3e5-03cd48701eae",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7e64c7fa-0b07-4381-a37e-fad563654360",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should PATCH a todo & statusCode_OK_200",
      "fullTitle": "test PATCH should PATCH a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 230,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "b62069eb-cf08-4adb-9dc4-4a89e1b8739f",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f1170477-275d-4b77-a966-d9ffa72a413d",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & 404",
      "fullTitle": "test PATCH should NOT PATCH a todo & 404",
      "timedOut": false,
      "duration": 215,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c2906bee-1019-4629-a67a-7e1829b53d75",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 108,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0012287f-d284-4b7d-be87-221233c4d688",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c48cc428-0981-47c3-8935-8717da67cac9",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "a1abe70c-6170-41e9-ae37-5fa9beb5fe6d",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 193,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "67023e8b-780d-4ee8-8d09-9780c45e1f69",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "5903fa21-6598-4ad0-b5aa-ea392d644e71",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should DELETE a Todo",
      "fullTitle": "test DELETE should DELETE a Todo",
      "timedOut": false,
      "duration": 224,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0092c421-f54d-455f-984c-1248e81ea45b",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 426,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "64b2348c-9b4f-4e2b-82b1-c063b08e634b",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "086a1eaf-572e-4f3a-839a-bcbac358e31d",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 209,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1cb1821d-f8d0-4171-a9b8-5d6e72d2153d",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7960aeb2-6846-446f-ae3b-f8101e0d4c07",
      "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "68ae2120-4a24-49a1-9e38-fe436dbf61c5",
      "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fac84021-8f88-45ec-9aeb-5fa447b0c597",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 214,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8ea19c5c-59d0-4d4a-b5a7-3ec129a67521",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a8a5d08d-7222-4293-aa5e-519fecb9047d",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should remove a token",
      "fullTitle": "DELETE users/me/token it should remove a token",
      "timedOut": false,
      "duration": 312,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f7c365c-ea47-4c6b-a33d-58d91de8f11c",
      "parentUUID": "2e625c8d-8d65-4602-b37d-203a7e10279e",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should save Todo",
      "fullTitle": "test POST should save Todo",
      "timedOut": false,
      "duration": 355,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "37a02a08-f6dd-4a58-8e27-4ede410861fe",
      "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
      "skipped": false
    },
    {
      "title": "should NOT save Todo with empty text",
      "fullTitle": "test POST should NOT save Todo with empty text",
      "timedOut": false,
      "duration": 224,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "e19755b4-642c-4a25-a910-fd792709d55b",
      "parentUUID": "1a7f4e23-8b4a-421a-b017-c3b44a3d9aef",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 207,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f7cc47ee-4a3b-413b-82b3-e58c661c31d6",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
      "fullTitle": "test GET should NOT GET all todos && statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1c319fb3-99f3-40b2-bbd8-5989198dfb19",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "823cf009-bba2-4f81-a245-80b5aacfd0ff",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should NOT GET a todo & 404",
      "fullTitle": "test GET should NOT GET a todo & 404",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "12ad7e3a-75a5-4633-b3e5-03cd48701eae",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7e64c7fa-0b07-4381-a37e-fad563654360",
      "parentUUID": "cbc106f0-605f-44bf-8a58-b037ad36e6c9",
      "skipped": false
    },
    {
      "title": "should PATCH a todo & statusCode_OK_200",
      "fullTitle": "test PATCH should PATCH a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 230,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "b62069eb-cf08-4adb-9dc4-4a89e1b8739f",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f1170477-275d-4b77-a966-d9ffa72a413d",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & 404",
      "fullTitle": "test PATCH should NOT PATCH a todo & 404",
      "timedOut": false,
      "duration": 215,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c2906bee-1019-4629-a67a-7e1829b53d75",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 108,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0012287f-d284-4b7d-be87-221233c4d688",
      "parentUUID": "c07b98aa-9680-4270-8ec8-bd51b819745b",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c48cc428-0981-47c3-8935-8717da67cac9",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "a1abe70c-6170-41e9-ae37-5fa9beb5fe6d",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 193,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "67023e8b-780d-4ee8-8d09-9780c45e1f69",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "5903fa21-6598-4ad0-b5aa-ea392d644e71",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "should DELETE a Todo",
      "fullTitle": "test DELETE should DELETE a Todo",
      "timedOut": false,
      "duration": 224,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "0092c421-f54d-455f-984c-1248e81ea45b",
      "parentUUID": "c4cc1cca-6eac-4502-9b72-c7baecf96e9d",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 426,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "64b2348c-9b4f-4e2b-82b1-c063b08e634b",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "086a1eaf-572e-4f3a-839a-bcbac358e31d",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 209,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1cb1821d-f8d0-4171-a9b8-5d6e72d2153d",
      "parentUUID": "d2cc3c8c-c704-4ff7-ad0c-2cca39f3fc5b",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 110,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7960aeb2-6846-446f-ae3b-f8101e0d4c07",
      "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "68ae2120-4a24-49a1-9e38-fe436dbf61c5",
      "parentUUID": "07ed20da-2a73-4c54-891a-220044a9cd58",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fac84021-8f88-45ec-9aeb-5fa447b0c597",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 214,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8ea19c5c-59d0-4d4a-b5a7-3ec129a67521",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a8a5d08d-7222-4293-aa5e-519fecb9047d",
      "parentUUID": "92e2b5fd-3c7e-4f9c-bd90-244cfdbfd88c",
      "skipped": false
    },
    {
      "title": "it should remove a token",
      "fullTitle": "DELETE users/me/token it should remove a token",
      "timedOut": false,
      "duration": 312,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f7c365c-ea47-4c6b-a33d-58d91de8f11c",
      "parentUUID": "2e625c8d-8d65-4602-b37d-203a7e10279e",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}