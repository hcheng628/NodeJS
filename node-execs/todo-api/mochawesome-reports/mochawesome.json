{
  "stats": {
    "suites": 9,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2017-03-25T18:23:36.569Z",
    "end": "2017-03-25T18:23:51.752Z",
    "duration": 15183,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test Todo APIs",
        "suites": [
          {
            "title": "test POST",
            "suites": [],
            "tests": [
              {
                "title": "Success Todo Save",
                "fullTitle": "Test Todo APIs test POST Success Todo Save",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nrequest(server.nodeApp)\n    .post('/todos')\n    .send({text})\n    .expect(200)\n    .expect((response)=>{\n        expect(response.body.text).toBeA('string').toBe(text);\n    })\n    .end((err,res)=>{\n        if(err){\n            return done(err);\n        }\n        Todo.find({text}).then((todos)=>{\n            expect(todos.length).toBe(1);\n            expect(todos[0].text).toBe(text);\n            done();\n        }).catch((error)=>{\n            done(error);\n        })\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6f57fce-868b-4466-99eb-f5c7cc7ce0e5",
                "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
                "skipped": false
              },
              {
                "title": "Fail Todo Save with Empty Text",
                "fullTitle": "Test Todo APIs test POST Fail Todo Save with Empty Text",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n    .post('/todos')\n    .send({})\n    .expect(400)\n    .end((err,res) => {\n        if(err){\n            return done(err);\n        }\n        Todo.find().then((todos)=>{\n            expect(todos.length).toBe(2);\n            done();\n        }).catch((error)=> done(error));\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a61824a5-23c7-4e55-b796-fdc9d87a1c75",
                "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "Success Todo Save",
                "fullTitle": "Test Todo APIs test POST Success Todo Save",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nrequest(server.nodeApp)\n    .post('/todos')\n    .send({text})\n    .expect(200)\n    .expect((response)=>{\n        expect(response.body.text).toBeA('string').toBe(text);\n    })\n    .end((err,res)=>{\n        if(err){\n            return done(err);\n        }\n        Todo.find({text}).then((todos)=>{\n            expect(todos.length).toBe(1);\n            expect(todos[0].text).toBe(text);\n            done();\n        }).catch((error)=>{\n            done(error);\n        })\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6f57fce-868b-4466-99eb-f5c7cc7ce0e5",
                "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
                "skipped": false
              },
              {
                "title": "Fail Todo Save with Empty Text",
                "fullTitle": "Test Todo APIs test POST Fail Todo Save with Empty Text",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n    .post('/todos')\n    .send({})\n    .expect(400)\n    .end((err,res) => {\n        if(err){\n            return done(err);\n        }\n        Todo.find().then((todos)=>{\n            expect(todos.length).toBe(2);\n            done();\n        }).catch((error)=> done(error));\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a61824a5-23c7-4e55-b796-fdc9d87a1c75",
                "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 379,
            "rootEmpty": false
          },
          {
            "title": "test GET",
            "suites": [],
            "tests": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Test Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos')\n.expect(200)\n.expect((resp)=> {\n    expect(resp.body.todos.length).toBe(2);\n})\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4f5ed2e1-7f5f-41e5-abb4-bb5969e602e0",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Test Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.text).toBe(todos[0].text);\n})\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "46382c4a-b18d-4851-b1b5-7d37e772b4c7",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should not GET a todo & 404",
                "fullTitle": "Test Todo APIs test GET should not GET a todo & 404",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f4a6585b-bec3-44a8-9700-4e4115492bcd",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/123')\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7eabf007-878e-4fee-b038-adac14e21879",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "47949fd2-b459-4379-8d93-8d378d2f661d",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Test Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos')\n.expect(200)\n.expect((resp)=> {\n    expect(resp.body.todos.length).toBe(2);\n})\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4f5ed2e1-7f5f-41e5-abb4-bb5969e602e0",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Test Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.text).toBe(todos[0].text);\n})\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "46382c4a-b18d-4851-b1b5-7d37e772b4c7",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should not GET a todo & 404",
                "fullTitle": "Test Todo APIs test GET should not GET a todo & 404",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f4a6585b-bec3-44a8-9700-4e4115492bcd",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/todos/123')\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7eabf007-878e-4fee-b038-adac14e21879",
                "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 328,
            "rootEmpty": false
          },
          {
            "title": "test UPDATE",
            "suites": [],
            "tests": [
              {
                "title": "should UPDATE a todo & statusCode_OK_200",
                "fullTitle": "Test Todo APIs test UPDATE should UPDATE a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2e0f9b2a-b0ed-4354-b16a-b20a360f6a68",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              },
              {
                "title": "should not UPDATE a todo & 404",
                "fullTitle": "Test Todo APIs test UPDATE should not UPDATE a todo & 404",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n//.send({tempText})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "62525706-b20f-45c8-b21f-d8797d881d1d",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              },
              {
                "title": "should not UPDATE a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test UPDATE should not UPDATE a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "efcef213-1b0b-47c0-83b1-7003eeec2a64",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should UPDATE a todo & statusCode_OK_200",
                "fullTitle": "Test Todo APIs test UPDATE should UPDATE a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2e0f9b2a-b0ed-4354-b16a-b20a360f6a68",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              },
              {
                "title": "should not UPDATE a todo & 404",
                "fullTitle": "Test Todo APIs test UPDATE should not UPDATE a todo & 404",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n//.send({tempText})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "62525706-b20f-45c8-b21f-d8797d881d1d",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              },
              {
                "title": "should not UPDATE a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test UPDATE should not UPDATE a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "efcef213-1b0b-47c0-83b1-7003eeec2a64",
                "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 227,
            "rootEmpty": false
          },
          {
            "title": "test DELETE",
            "suites": [],
            "tests": [
              {
                "title": "should DELETE a todo",
                "fullTitle": "Test Todo APIs test DELETE should DELETE a todo",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff2c1927-12c9-4fa9-83f1-ec52bf0f036f",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_NotFound_404",
                "fullTitle": "Test Todo APIs test DELETE should fail DELETE & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abab2d38-781d-4a9e-94d4-c83f75a4733e",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "95b63cc2-7810-453e-8a3b-1060c7bbc77c",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should DELETE a todo",
                "fullTitle": "Test Todo APIs test DELETE should DELETE a todo",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff2c1927-12c9-4fa9-83f1-ec52bf0f036f",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_NotFound_404",
                "fullTitle": "Test Todo APIs test DELETE should fail DELETE & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abab2d38-781d-4a9e-94d4-c83f75a4733e",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Test Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "95b63cc2-7810-453e-8a3b-1060c7bbc77c",
                "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 203,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.todo.test.js",
        "uuid": "ed5e82e0-a992-4a43-a2c1-56d531393b8f",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Test User APIs",
        "suites": [
          {
            "title": "GET /users/me",
            "suites": [],
            "tests": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7013a48e-8416-4516-a7d7-f217dfe089db",
                "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3dd36767-4eb8-4c88-b36e-6650a0a56446",
                "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "b326fe53-faf0-4195-95d3-19665b7f2e27",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7013a48e-8416-4516-a7d7-f217dfe089db",
                "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3dd36767-4eb8-4c88-b36e-6650a0a56446",
                "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 112,
            "rootEmpty": false
          },
          {
            "title": "POST /users/login",
            "suites": [],
            "tests": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "de5b79d4-720e-4fbc-bf14-863cf4c02f7c",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cd218c9c-aaee-4c80-86b5-371d477c5a0c",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "845cac7a-6299-4a81-8bec-66e4a182ff25",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "02938ebb-872b-453d-948e-a8722e11c96d",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "de5b79d4-720e-4fbc-bf14-863cf4c02f7c",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cd218c9c-aaee-4c80-86b5-371d477c5a0c",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "845cac7a-6299-4a81-8bec-66e4a182ff25",
                "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 640,
            "rootEmpty": false
          },
          {
            "title": "POST /users",
            "suites": [],
            "tests": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 401,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ccb5cdb-d462-466b-8fac-92ed255d3666",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e7d7797f-ae17-486c-a271-9d9ebda63755",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "676a04b9-547e-47af-858e-2ae6e21b7ae4",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "4592a42b-0dab-4b99-bf29-ab5c14707954",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 401,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ccb5cdb-d462-466b-8fac-92ed255d3666",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e7d7797f-ae17-486c-a271-9d9ebda63755",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "676a04b9-547e-47af-858e-2ae6e21b7ae4",
                "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 603,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.user.test.js",
        "uuid": "b176a821-2a56-459d-9774-8a6a6ba42f65",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a2e2c1d1-d99e-4168-b007-9fafc3827a6b",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Success Todo Save",
      "fullTitle": "test POST Success Todo Save",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nrequest(server.nodeApp)\n    .post('/todos')\n    .send({text})\n    .expect(200)\n    .expect((response)=>{\n        expect(response.body.text).toBeA('string').toBe(text);\n    })\n    .end((err,res)=>{\n        if(err){\n            return done(err);\n        }\n        Todo.find({text}).then((todos)=>{\n            expect(todos.length).toBe(1);\n            expect(todos[0].text).toBe(text);\n            done();\n        }).catch((error)=>{\n            done(error);\n        })\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6f57fce-868b-4466-99eb-f5c7cc7ce0e5",
      "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
      "skipped": false
    },
    {
      "title": "Fail Todo Save with Empty Text",
      "fullTitle": "test POST Fail Todo Save with Empty Text",
      "timedOut": false,
      "duration": 117,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n    .post('/todos')\n    .send({})\n    .expect(400)\n    .end((err,res) => {\n        if(err){\n            return done(err);\n        }\n        Todo.find().then((todos)=>{\n            expect(todos.length).toBe(2);\n            done();\n        }).catch((error)=> done(error));\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a61824a5-23c7-4e55-b796-fdc9d87a1c75",
      "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos')\n.expect(200)\n.expect((resp)=> {\n    expect(resp.body.todos.length).toBe(2);\n})\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "4f5ed2e1-7f5f-41e5-abb4-bb5969e602e0",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.text).toBe(todos[0].text);\n})\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "46382c4a-b18d-4851-b1b5-7d37e772b4c7",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should not GET a todo & 404",
      "fullTitle": "test GET should not GET a todo & 404",
      "timedOut": false,
      "duration": 106,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f4a6585b-bec3-44a8-9700-4e4115492bcd",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/123')\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7eabf007-878e-4fee-b038-adac14e21879",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should UPDATE a todo & statusCode_OK_200",
      "fullTitle": "test UPDATE should UPDATE a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 114,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "2e0f9b2a-b0ed-4354-b16a-b20a360f6a68",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should not UPDATE a todo & 404",
      "fullTitle": "test UPDATE should not UPDATE a todo & 404",
      "timedOut": false,
      "duration": 109,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n//.send({tempText})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "62525706-b20f-45c8-b21f-d8797d881d1d",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should not UPDATE a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test UPDATE should not UPDATE a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "efcef213-1b0b-47c0-83b1-7003eeec2a64",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should DELETE a todo",
      "fullTitle": "test DELETE should DELETE a todo",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ff2c1927-12c9-4fa9-83f1-ec52bf0f036f",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_NotFound_404",
      "fullTitle": "test DELETE should fail DELETE & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "abab2d38-781d-4a9e-94d4-c83f75a4733e",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "95b63cc2-7810-453e-8a3b-1060c7bbc77c",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 108,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7013a48e-8416-4516-a7d7-f217dfe089db",
      "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "3dd36767-4eb8-4c88-b36e-6650a0a56446",
      "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "de5b79d4-720e-4fbc-bf14-863cf4c02f7c",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 218,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd218c9c-aaee-4c80-86b5-371d477c5a0c",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "845cac7a-6299-4a81-8bec-66e4a182ff25",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9ccb5cdb-d462-466b-8fac-92ed255d3666",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e7d7797f-ae17-486c-a271-9d9ebda63755",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 196,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "676a04b9-547e-47af-858e-2ae6e21b7ae4",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Success Todo Save",
      "fullTitle": "test POST Success Todo Save",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nrequest(server.nodeApp)\n    .post('/todos')\n    .send({text})\n    .expect(200)\n    .expect((response)=>{\n        expect(response.body.text).toBeA('string').toBe(text);\n    })\n    .end((err,res)=>{\n        if(err){\n            return done(err);\n        }\n        Todo.find({text}).then((todos)=>{\n            expect(todos.length).toBe(1);\n            expect(todos[0].text).toBe(text);\n            done();\n        }).catch((error)=>{\n            done(error);\n        })\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "f6f57fce-868b-4466-99eb-f5c7cc7ce0e5",
      "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
      "skipped": false
    },
    {
      "title": "Fail Todo Save with Empty Text",
      "fullTitle": "test POST Fail Todo Save with Empty Text",
      "timedOut": false,
      "duration": 117,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n    .post('/todos')\n    .send({})\n    .expect(400)\n    .end((err,res) => {\n        if(err){\n            return done(err);\n        }\n        Todo.find().then((todos)=>{\n            expect(todos.length).toBe(2);\n            done();\n        }).catch((error)=> done(error));\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a61824a5-23c7-4e55-b796-fdc9d87a1c75",
      "parentUUID": "1ed2fca6-303f-4b56-8357-d89d92e45dfa",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos')\n.expect(200)\n.expect((resp)=> {\n    expect(resp.body.todos.length).toBe(2);\n})\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "4f5ed2e1-7f5f-41e5-abb4-bb5969e602e0",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.text).toBe(todos[0].text);\n})\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "46382c4a-b18d-4851-b1b5-7d37e772b4c7",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should not GET a todo & 404",
      "fullTitle": "test GET should not GET a todo & 404",
      "timedOut": false,
      "duration": 106,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f4a6585b-bec3-44a8-9700-4e4115492bcd",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/todos/123')\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "7eabf007-878e-4fee-b038-adac14e21879",
      "parentUUID": "47949fd2-b459-4379-8d93-8d378d2f661d",
      "skipped": false
    },
    {
      "title": "should UPDATE a todo & statusCode_OK_200",
      "fullTitle": "test UPDATE should UPDATE a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 114,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "2e0f9b2a-b0ed-4354-b16a-b20a360f6a68",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should not UPDATE a todo & 404",
      "fullTitle": "test UPDATE should not UPDATE a todo & 404",
      "timedOut": false,
      "duration": 109,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n//.send({tempText})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "62525706-b20f-45c8-b21f-d8797d881d1d",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should not UPDATE a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test UPDATE should not UPDATE a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "efcef213-1b0b-47c0-83b1-7003eeec2a64",
      "parentUUID": "5d82def4-2501-4375-ba36-dad7f4fc4e24",
      "skipped": false
    },
    {
      "title": "should DELETE a todo",
      "fullTitle": "test DELETE should DELETE a todo",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ff2c1927-12c9-4fa9-83f1-ec52bf0f036f",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_NotFound_404",
      "fullTitle": "test DELETE should fail DELETE & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 101,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "abab2d38-781d-4a9e-94d4-c83f75a4733e",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "95b63cc2-7810-453e-8a3b-1060c7bbc77c",
      "parentUUID": "6d46a5d0-0e91-4b11-8557-84af1c1e6c89",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 108,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7013a48e-8416-4516-a7d7-f217dfe089db",
      "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "3dd36767-4eb8-4c88-b36e-6650a0a56446",
      "parentUUID": "b326fe53-faf0-4195-95d3-19665b7f2e27",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "de5b79d4-720e-4fbc-bf14-863cf4c02f7c",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 218,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd218c9c-aaee-4c80-86b5-371d477c5a0c",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 99,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "845cac7a-6299-4a81-8bec-66e4a182ff25",
      "parentUUID": "02938ebb-872b-453d-948e-a8722e11c96d",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9ccb5cdb-d462-466b-8fac-92ed255d3666",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e7d7797f-ae17-486c-a271-9d9ebda63755",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 196,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "676a04b9-547e-47af-858e-2ae6e21b7ae4",
      "parentUUID": "4592a42b-0dab-4b99-bf29-ab5c14707954",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}