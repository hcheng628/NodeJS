{
  "stats": {
    "suites": 10,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2017-03-26T20:51:49.874Z",
    "end": "2017-03-26T20:52:20.220Z",
    "duration": 30346,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Todo APIs",
        "suites": [
          {
            "title": "test POST",
            "suites": [],
            "tests": [
              {
                "title": "should save Todo",
                "fullTitle": "Todo APIs test POST should save Todo",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ca88b1cc-df0a-41d6-bc42-a0e81e105c61",
                "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
                "skipped": false
              },
              {
                "title": "should NOT save Todo with empty text",
                "fullTitle": "Todo APIs test POST should NOT save Todo with empty text",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7060a8cd-93ed-4879-b1a6-b4fb0b35b85a",
                "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should save Todo",
                "fullTitle": "Todo APIs test POST should save Todo",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ca88b1cc-df0a-41d6-bc42-a0e81e105c61",
                "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
                "skipped": false
              },
              {
                "title": "should NOT save Todo with empty text",
                "fullTitle": "Todo APIs test POST should NOT save Todo with empty text",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7060a8cd-93ed-4879-b1a6-b4fb0b35b85a",
                "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 572,
            "rootEmpty": false
          },
          {
            "title": "test GET",
            "suites": [],
            "tests": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1d5bccc3-ed18-4eaf-a8c6-cac298449cb8",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test GET should NOT GET all todos && statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b6fbb8b1-3dfc-4296-9548-b8cc771dfc9b",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c7f59143-71ee-4a5b-a259-dafaf52b048b",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should NOT GET a todo & 404",
                "fullTitle": "Todo APIs test GET should NOT GET a todo & 404",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "21d33e1f-dfe1-4027-a980-37beda8f5491",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "aff45bf7-a4d8-4f1c-80b8-9a1d97ff8547",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "313d0980-c794-4eb5-b240-ce656baa178c",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should GET all todos && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET all todos && statusCode_OK_200",
                "timedOut": false,
                "duration": 202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1d5bccc3-ed18-4eaf-a8c6-cac298449cb8",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test GET should NOT GET all todos && statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b6fbb8b1-3dfc-4296-9548-b8cc771dfc9b",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should GET a todo && statusCode_OK_200",
                "fullTitle": "Todo APIs test GET should GET a todo && statusCode_OK_200",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c7f59143-71ee-4a5b-a259-dafaf52b048b",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should NOT GET a todo & 404",
                "fullTitle": "Todo APIs test GET should NOT GET a todo & 404",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "21d33e1f-dfe1-4027-a980-37beda8f5491",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              },
              {
                "title": "should GET - BadInput & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test GET should GET - BadInput & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "aff45bf7-a4d8-4f1c-80b8-9a1d97ff8547",
                "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 433,
            "rootEmpty": false
          },
          {
            "title": "test PATCH",
            "suites": [],
            "tests": [
              {
                "title": "should PATCH a todo & statusCode_OK_200",
                "fullTitle": "Todo APIs test PATCH should PATCH a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 221,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ebff63c0-1bab-47ef-9f00-9e7c3cbb92f4",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "678e6968-42d6-4c0f-a951-c4542ecc5f25",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & 404",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & 404",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f734928c-3a56-44aa-83bb-08f6e9553d12",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "04617d2d-6848-4b00-9d95-e2a30a0c9a48",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should PATCH a todo & statusCode_OK_200",
                "fullTitle": "Todo APIs test PATCH should PATCH a todo & statusCode_OK_200",
                "timedOut": false,
                "duration": 221,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ebff63c0-1bab-47ef-9f00-9e7c3cbb92f4",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "678e6968-42d6-4c0f-a951-c4542ecc5f25",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & 404",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & 404",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f734928c-3a56-44aa-83bb-08f6e9553d12",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              },
              {
                "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "04617d2d-6848-4b00-9d95-e2a30a0c9a48",
                "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 539,
            "rootEmpty": false
          },
          {
            "title": "test DELETE",
            "suites": [],
            "tests": [
              {
                "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "33cc503c-6eaf-4fbb-80cc-bb1ff1103ebe",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d5c9af15-5d57-458e-bfe4-9d3bd2f055de",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "81b82222-09f2-488a-976c-e37316342c5d",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c3e85bc-8461-4ede-99f0-9476d37349f3",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should DELETE a Todo",
                "fullTitle": "Todo APIs test DELETE should DELETE a Todo",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "76c1f821-73fb-4728-8248-33516d1e978f",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.todo.test.js",
            "uuid": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
            "passes": [
              {
                "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "33cc503c-6eaf-4fbb-80cc-bb1ff1103ebe",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d5c9af15-5d57-458e-bfe4-9d3bd2f055de",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "fullTitle": "Todo APIs test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "81b82222-09f2-488a-976c-e37316342c5d",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should fail DELETE & statusCode_BadClientRequest_400",
                "fullTitle": "Todo APIs test DELETE should fail DELETE & statusCode_BadClientRequest_400",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c3e85bc-8461-4ede-99f0-9476d37349f3",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              },
              {
                "title": "should DELETE a Todo",
                "fullTitle": "Todo APIs test DELETE should DELETE a Todo",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "76c1f821-73fb-4728-8248-33516d1e978f",
                "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 722,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.todo.test.js",
        "uuid": "e1e671d7-9447-47aa-b869-47e676938940",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.todo.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Test User APIs",
        "suites": [
          {
            "title": "POST /users",
            "suites": [],
            "tests": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33eaf337-4731-4df6-8492-70b966c2ee54",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7e6adba4-51f5-4ddb-a7eb-c5af620633d4",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "49d24606-3112-42a4-ab82-094855769ec9",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should create a user",
                "fullTitle": "Test User APIs POST /users it should create a user",
                "timedOut": false,
                "duration": 430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33eaf337-4731-4df6-8492-70b966c2ee54",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              },
              {
                "title": "it should return a validation error",
                "fullTitle": "Test User APIs POST /users it should return a validation error",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7e6adba4-51f5-4ddb-a7eb-c5af620633d4",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              },
              {
                "title": "it should not create an user if email in use",
                "fullTitle": "Test User APIs POST /users it should not create an user if email in use",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "49d24606-3112-42a4-ab82-094855769ec9",
                "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 640,
            "rootEmpty": false
          },
          {
            "title": "GET /users/me",
            "suites": [],
            "tests": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6c5e9e8-309c-469b-b5c6-e5fca589b323",
                "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d1559a78-daae-4b46-8036-6722f2804e13",
                "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "11293662-827c-45f2-bbd1-f7d00eeed868",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should return a user",
                "fullTitle": "Test User APIs GET /users/me it should return a user",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6c5e9e8-309c-469b-b5c6-e5fca589b323",
                "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
                "skipped": false
              },
              {
                "title": "it should return a 401 not authenticated",
                "fullTitle": "Test User APIs GET /users/me it should return a 401 not authenticated",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d1559a78-daae-4b46-8036-6722f2804e13",
                "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 108,
            "rootEmpty": false
          },
          {
            "title": "POST /users/login",
            "suites": [],
            "tests": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d4f0fb85-9ff2-43f9-9423-7373a7b3e8f7",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8495c0f2-f12a-4098-b014-d481d30e298e",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8ab78144-5bc0-4da7-9597-3f2c8f458c87",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should login",
                "fullTitle": "Test User APIs POST /users/login it should login",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d4f0fb85-9ff2-43f9-9423-7373a7b3e8f7",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              },
              {
                "title": "it should NOT login InCorrect Password",
                "fullTitle": "Test User APIs POST /users/login it should NOT login InCorrect Password",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8495c0f2-f12a-4098-b014-d481d30e298e",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              },
              {
                "title": "it should NOT login no such E-mail found",
                "fullTitle": "Test User APIs POST /users/login it should NOT login no such E-mail found",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8ab78144-5bc0-4da7-9597-3f2c8f458c87",
                "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 640,
            "rootEmpty": false
          },
          {
            "title": "DELETE users/me/token",
            "suites": [],
            "tests": [
              {
                "title": "it should remove a token",
                "fullTitle": "Test User APIs DELETE users/me/token it should remove a token",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bf4750c5-c2b6-42b0-8d80-61ec0bb149da",
                "parentUUID": "6e967a60-c296-4f46-b4e0-61ddedc94cf9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/server/server.user.test.js",
            "uuid": "6e967a60-c296-4f46-b4e0-61ddedc94cf9",
            "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
            "passes": [
              {
                "title": "it should remove a token",
                "fullTitle": "Test User APIs DELETE users/me/token it should remove a token",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bf4750c5-c2b6-42b0-8d80-61ec0bb149da",
                "parentUUID": "6e967a60-c296-4f46-b4e0-61ddedc94cf9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 307,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/server/server.user.test.js",
        "uuid": "07d5f22e-8632-4cd2-b713-289ae0414bdb",
        "fullFile": "/Users/supercheng/GitHub/node/node-execs/todo-api/server/server.user.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "3ed9847f-0afb-46cb-90fd-19c6dc53a3f8",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should save Todo",
      "fullTitle": "test POST should save Todo",
      "timedOut": false,
      "duration": 362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "ca88b1cc-df0a-41d6-bc42-a0e81e105c61",
      "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
      "skipped": false
    },
    {
      "title": "should NOT save Todo with empty text",
      "fullTitle": "test POST should NOT save Todo with empty text",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "7060a8cd-93ed-4879-b1a6-b4fb0b35b85a",
      "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1d5bccc3-ed18-4eaf-a8c6-cac298449cb8",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
      "fullTitle": "test GET should NOT GET all todos && statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "b6fbb8b1-3dfc-4296-9548-b8cc771dfc9b",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 107,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c7f59143-71ee-4a5b-a259-dafaf52b048b",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should NOT GET a todo & 404",
      "fullTitle": "test GET should NOT GET a todo & 404",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "21d33e1f-dfe1-4027-a980-37beda8f5491",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "aff45bf7-a4d8-4f1c-80b8-9a1d97ff8547",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should PATCH a todo & statusCode_OK_200",
      "fullTitle": "test PATCH should PATCH a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 221,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ebff63c0-1bab-47ef-9f00-9e7c3cbb92f4",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "678e6968-42d6-4c0f-a951-c4542ecc5f25",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & 404",
      "fullTitle": "test PATCH should NOT PATCH a todo & 404",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f734928c-3a56-44aa-83bb-08f6e9553d12",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 116,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "04617d2d-6848-4b00-9d95-e2a30a0c9a48",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "33cc503c-6eaf-4fbb-80cc-bb1ff1103ebe",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "d5c9af15-5d57-458e-bfe4-9d3bd2f055de",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "81b82222-09f2-488a-976c-e37316342c5d",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 98,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "2c3e85bc-8461-4ede-99f0-9476d37349f3",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should DELETE a Todo",
      "fullTitle": "test DELETE should DELETE a Todo",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "76c1f821-73fb-4728-8248-33516d1e978f",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "33eaf337-4731-4df6-8492-70b966c2ee54",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7e6adba4-51f5-4ddb-a7eb-c5af620633d4",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "49d24606-3112-42a4-ab82-094855769ec9",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e6c5e9e8-309c-469b-b5c6-e5fca589b323",
      "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "d1559a78-daae-4b46-8036-6722f2804e13",
      "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4f0fb85-9ff2-43f9-9423-7373a7b3e8f7",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 219,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8495c0f2-f12a-4098-b014-d481d30e298e",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "8ab78144-5bc0-4da7-9597-3f2c8f458c87",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should remove a token",
      "fullTitle": "DELETE users/me/token it should remove a token",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bf4750c5-c2b6-42b0-8d80-61ec0bb149da",
      "parentUUID": "6e967a60-c296-4f46-b4e0-61ddedc94cf9",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should save Todo",
      "fullTitle": "test POST should save Todo",
      "timedOut": false,
      "duration": 362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"Testing Text\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(200)\n  .expect((response)=>{\n      expect(response.body.text).toBeA('string').toBe(text);\n  })\n  .end((err,res)=>{\n      if(err){\n          return done(err);\n      }\n      Todo.find({text}).then((todos)=>{\n          expect(todos.length).toBe(1);\n          expect(todos[0].text).toBe(text);\n          done();\n      }).catch((error)=>{\n          done(error);\n      })\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "ca88b1cc-df0a-41d6-bc42-a0e81e105c61",
      "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
      "skipped": false
    },
    {
      "title": "should NOT save Todo with empty text",
      "fullTitle": "test POST should NOT save Todo with empty text",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = \"\";\nvar _creator = users[0]._id;\nrequest(server.nodeApp)\n  .post('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .send({text, _creator})\n  .expect(400)\n  .end((err,res) => {\n    if(err){\n      return done(err);\n    }\n    Todo.find().then((todos)=>{\n      expect(todos.length).toBe(2);\n      done();\n    }).catch((error)=> done(error));\n  });",
      "err": {},
      "isRoot": false,
      "uuid": "7060a8cd-93ed-4879-b1a6-b4fb0b35b85a",
      "parentUUID": "d6e0e1fc-5f4f-4fb3-8e20-7022c1985bcc",
      "skipped": false
    },
    {
      "title": "should GET all todos && statusCode_OK_200",
      "fullTitle": "test GET should GET all todos && statusCode_OK_200",
      "timedOut": false,
      "duration": 202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .set('x-auth', users[0].tokens[0].token)\n  .expect(200)\n  .expect((resp)=> {\n    expect(resp.body.todos.length).toBe(1);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "1d5bccc3-ed18-4eaf-a8c6-cac298449cb8",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should NOT GET all todos && statusCode_UnAuthorized_401",
      "fullTitle": "test GET should NOT GET all todos && statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos')\n  .expect(401)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "b6fbb8b1-3dfc-4296-9548-b8cc771dfc9b",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should GET a todo && statusCode_OK_200",
      "fullTitle": "test GET should GET a todo && statusCode_OK_200",
      "timedOut": false,
      "duration": 107,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + todos[0]._id.toHexString())\n  .expect(200)\n  .expect((resp)=>{\n    expect(resp.body.text).toBe(todos[0].text);\n  })\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "c7f59143-71ee-4a5b-a259-dafaf52b048b",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should NOT GET a todo & 404",
      "fullTitle": "test GET should NOT GET a todo & 404",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/' + new ObjectID().toHexString())\n  .expect(404)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "21d33e1f-dfe1-4027-a980-37beda8f5491",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should GET - BadInput & statusCode_BadClientRequest_400",
      "fullTitle": "test GET should GET - BadInput & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n  .get('/todos/123')\n  .expect(400)\n  .end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "aff45bf7-a4d8-4f1c-80b8-9a1d97ff8547",
      "parentUUID": "313d0980-c794-4eb5-b240-ce656baa178c",
      "skipped": false
    },
    {
      "title": "should PATCH a todo & statusCode_OK_200",
      "fullTitle": "test PATCH should PATCH a todo & statusCode_OK_200",
      "timedOut": false,
      "duration": 221,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({ text })\n.expect((returnVal)=>{\n  // console.log('---------: ' + JSON.stringify(returnVal.body,undefined,2));\n  expect(returnVal.body.text).toBeA('string').toBe(text);\n})\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "ebff63c0-1bab-47ef-9f00-9e7c3cbb92f4",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + todos[0]._id.toHexString())\n.send({ text })\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "678e6968-42d6-4c0f-a951-c4542ecc5f25",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & 404",
      "fullTitle": "test PATCH should NOT PATCH a todo & 404",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var text = 'Writing Node Test Cases';\nrequest(server.nodeApp)\n.patch('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.send({text})\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "f734928c-3a56-44aa-83bb-08f6e9553d12",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "fullTitle": "test PATCH should NOT PATCH a todo & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 116,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var tempText = {\n  text: 'Writing Node Test Cases'\n};\nrequest(server.nodeApp)\n.patch('/todos/' + '123')\n.set('x-auth', users[0].tokens[0].token)\n.send({tempText})\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "04617d2d-6848-4b00-9d95-e2a30a0c9a48",
      "parentUUID": "7d4cfcb7-37ca-464e-8b75-7a19d632b99a",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_UnAuthorized_401",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n//.set('x-auth', users[0].tokens[0].token)\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "33cc503c-6eaf-4fbb-80cc-bb1ff1103ebe",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 205,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + new ObjectID().toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "d5c9af15-5d57-458e-bfe4-9d3bd2f055de",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "fullTitle": "test DELETE should NOT DELETE a Todo with different login & statusCode_NotFound_404",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[1].tokens[0].token)\n.expect(404)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "81b82222-09f2-488a-976c-e37316342c5d",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should fail DELETE & statusCode_BadClientRequest_400",
      "fullTitle": "test DELETE should fail DELETE & statusCode_BadClientRequest_400",
      "timedOut": false,
      "duration": 98,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + 'BADINPUT')\n.set('x-auth', users[0].tokens[0].token)\n.expect(400)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "2c3e85bc-8461-4ede-99f0-9476d37349f3",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "should DELETE a Todo",
      "fullTitle": "test DELETE should DELETE a Todo",
      "timedOut": false,
      "duration": 210,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/todos/' + todos[0]._id.toHexString())\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "76c1f821-73fb-4728-8248-33516d1e978f",
      "parentUUID": "c3b91370-55db-4d2a-a7a1-ae2c93282c0f",
      "skipped": false
    },
    {
      "title": "it should create a user",
      "fullTitle": "POST /users it should create a user",
      "timedOut": false,
      "duration": 430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@ksu.edu';\nvar password=\"password\";\nvar newUser = {\n  email: email,\n  password: password\n};\n// console.log({newUser});\n// console.log({email, password});\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body.email).toBe(email);\n  expect(resp.headers['x-auth']).toExist();\n  expect(resp.body._id).toExist();\n})\n.end((err,res)=>{\n  if(err){\n    return done(err);\n  }\n  User.findOne({email: email}).then((res)=>{\n    expect(res.email).toBe(email);\n    expect(res.password).toNotBe(password);\n    done();\n  }).catch((err)=>{\n    if(err){\n      return done(err);\n    }\n    done();\n  });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "33eaf337-4731-4df6-8492-70b966c2ee54",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should return a validation error",
      "fullTitle": "POST /users it should return a validation error",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@hcheng';\nvar password = '123';\nrequest(server.nodeApp)\n.post('/users')\n.send({email,password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7e6adba4-51f5-4ddb-a7eb-c5af620633d4",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should not create an user if email in use",
      "fullTitle": "POST /users it should not create an user if email in use",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var email = 'hcheng@spsu.edu';\nvar password = 'password';\nrequest(server.nodeApp)\n.post('/users')\n.send({email, password})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "49d24606-3112-42a4-ab82-094855769ec9",
      "parentUUID": "c5d0fb13-8fed-486b-933e-2611c61bc1d4",
      "skipped": false
    },
    {
      "title": "it should return a user",
      "fullTitle": "GET /users/me it should return a user",
      "timedOut": false,
      "duration": 104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// console.log(\"Checking...\" + users[0].tokens[0].token);\nrequest(server.nodeApp)\n.get('/users/me')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  // console.log(resp.body._id);\n  // console.log(resp.body.email);\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  })\n.end((err,res)=>{\n  if(err) return done(err);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e6c5e9e8-309c-469b-b5c6-e5fca589b323",
      "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
      "skipped": false
    },
    {
      "title": "it should return a 401 not authenticated",
      "fullTitle": "GET /users/me it should return a 401 not authenticated",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.get('/users/me')\n.expect(401)\n.end(done);",
      "err": {},
      "isRoot": false,
      "uuid": "d1559a78-daae-4b46-8036-6722f2804e13",
      "parentUUID": "11293662-827c-45f2-bbd1-f7d00eeed868",
      "skipped": false
    },
    {
      "title": "it should login",
      "fullTitle": "POST /users/login it should login",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({email: users[0].email, password: users[0].password})\n.expect(200)\n.expect((resp)=>{\n  expect(resp.body._id).toBe(users[0]._id.toHexString());\n  expect(resp.body.email).toBe(users[0].email);\n  expect(resp.headers['x-auth']).toExist();\n}).\nend((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4f0fb85-9ff2-43f9-9423-7373a7b3e8f7",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should NOT login InCorrect Password",
      "fullTitle": "POST /users/login it should NOT login InCorrect Password",
      "timedOut": false,
      "duration": 219,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: users[0].email,\n  password: users[0].password + '1'\n})\n.expect(500)\n.expect((resp)=>{\n  // console.log('---------', resp.error);\n  expect(resp.error.text).toBe('InCorrect Password');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8495c0f2-f12a-4098-b014-d481d30e298e",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should NOT login no such E-mail found",
      "fullTitle": "POST /users/login it should NOT login no such E-mail found",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.post('/users/login')\n.send({\n  email: 'haha' + users[0].email,\n  password: users[0].password\n})\n.expect(500)\n.expect((resp)=>{\n  expect(resp.error.text).toBe('No such E-mail Address Found');\n  expect(resp.headers['x-auth']).toNotExist();\n})\n.end((err,resp)=>{\n  if(err){\n    done(err);\n  }\n  done();\n})",
      "err": {},
      "isRoot": false,
      "uuid": "8ab78144-5bc0-4da7-9597-3f2c8f458c87",
      "parentUUID": "c66fda6b-24a6-4730-8404-9f89b00a4fa1",
      "skipped": false
    },
    {
      "title": "it should remove a token",
      "fullTitle": "DELETE users/me/token it should remove a token",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request(server.nodeApp)\n.delete('/users/me/token')\n.set('x-auth', users[0].tokens[0].token)\n.expect(200)\n.expect((resp)=>{\n  console.log(JSON.stringify(resp.body, undefined,2));\n  var obj = {};\n  // return Object.keys(obj).length;\n  expect(resp.body).toEqual(obj);\n})\n.end((err,res)=>{\n  if(err){\n    done(err);\n  }\n  User.findOne({email: users[0].email}).then((doc)=>{\n    expect(doc.tokens.length).toBe(0);\n    done();\n  }).catch((err)=>{\n    done(err);\n  })\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bf4750c5-c2b6-42b0-8d80-61ec0bb149da",
      "parentUUID": "6e967a60-c296-4f46-b4e0-61ddedc94cf9",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}